syntax = "proto3";
package gopkg.in.bblfsh.sdk.v2.protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) =  true;
option (gogoproto.goproto_getters_all) = false;
option go_package = "protocol";

// ParseRequest is a request to parse a file and get its UAST.
message ParseRequest {
    // Content stores the content of a source file. Required.
    string content  = 1;
    // Language can be set optionally to disable automatic language detection.
    string language = 2;
    // Filename can be set optionally to assist automatic language detection.
    string filename = 3;
    // Mode sets a transformation pipeline used for UAST.
    Mode   mode = 4;
}

enum Mode {
    // DefaultMode selects the transformation mode that is considered to produce UAST of the best quality.
    DEFAULT_MODE = 0x0 [(gogoproto.enumvalue_customname) = "DefaultMode"];
    // Native disables any UAST transformations and emits a native language AST as returned by the parser.
    NATIVE       = 0x1 [(gogoproto.enumvalue_customname) = "Native"];
    // Preprocessed runs only basic transformation over native AST (normalize positional info, type fields).
    PREPROCESSED = 0x2 [(gogoproto.enumvalue_customname) = "Preprocessed"];
    // Annotated UAST is based on native AST, but provides role annotations for nodes.
    ANNOTATED    = 0x4 [(gogoproto.enumvalue_customname) = "Annotated"];
    // Semantic UAST normalizes native AST nodes to a unified structure where possible.
    SEMANTIC     = 0x8 [(gogoproto.enumvalue_customname) = "Semantic"];
}

// ParseResponse is the reply to ParseRequest.
message ParseResponse {
    // UAST is a binary encoding of the resulting UAST.
    bytes  uast = 1;
    // Language that was automatically detected.
    string language = 2;
    // Errors is a list of parsing errors.
    // Only set if parser was able to return a response. Otherwise gRPC error codes are used.
    repeated ParseError errors = 3;
}

message ParseError {
    // Text is an error message.
    string text = 1;
}

service Driver {
    // Parse returns an UAST for a given source file.
    rpc Parse (ParseRequest) returns (ParseResponse);
}

message Version {
    string version = 1;
    google.protobuf.Timestamp build = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

enum DevelopmentStatus {
    DEV_INACTIVE = 0 [(gogoproto.enumvalue_customname) = "Inactive"];
    DEV_PLANNING = 1 [(gogoproto.enumvalue_customname) = "Planning"];
    DEV_PREALPHA = 2 [(gogoproto.enumvalue_customname) = "PreAlpha"];
    DEV_ALPHA    = 3 [(gogoproto.enumvalue_customname) = "Alpha"];
    DEV_BETA     = 4 [(gogoproto.enumvalue_customname) = "Beta"];
    DEV_STABLE   = 5 [(gogoproto.enumvalue_customname) = "Stable"];
    DEV_MATURE   = 6 [(gogoproto.enumvalue_customname) = "Mature"];
}

message Manifest {
    // Name is a human-readable language or driver name.
    string name     = 1;
    // Language is a Babelfish language identifier.
    string language = 2;
    // Aliases is a list of alternative language identifiers from Enry/Linguist.
    repeated string aliases = 3;
    // Version of the language driver.
    Version version = 4;
    // Status of the driver development.
    DevelopmentStatus status = 5;
    // Features this driver supports.
    repeated string features = 6;
}

message VersionRequest {}

message VersionResponse {
    Version version = 1;
}

message SupportedLanguagesRequest {}

message SupportedLanguagesResponse {
    // Languages is a list of driver manifests for each language supported by the server.
    repeated Manifest languages = 1;
}

service DriverHost {
    // ServerVersion returns version information of this server.
    rpc ServerVersion(VersionRequest) returns (VersionResponse);
    // SupportedLanguages returns a list of languages supported by the server.
    rpc SupportedLanguages (SupportedLanguagesRequest) returns (SupportedLanguagesResponse);
}
