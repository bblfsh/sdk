syntax = "proto3";
package gopkg.in.bblfsh.sdk.v1.protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "gopkg.in/bblfsh/sdk.v2/uast/generated.proto";
import "gopkg.in/bblfsh/sdk.v2/uast/role/generated.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.protosizer_all) = true;
option (gogoproto.sizer_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) =  true;
option go_package = "protocol";

// NativeParseRequest is a request to parse a file and get its native AST.
message NativeParseRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string filename = 1;
	string language = 2;
	string content = 3;
	gopkg.in.bblfsh.sdk.v1.protocol.Encoding encoding = 4;
	google.protobuf.Duration timeout = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

// NativeParseResponse is the reply to NativeParseRequest by the native parser.
message NativeParseResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	gopkg.in.bblfsh.sdk.v1.protocol.Status status = 1;
	repeated string errors = 2;
	google.protobuf.Duration elapsed = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
	string ast = 4 [(gogoproto.customname) = "AST"];
	string language = 5;
}

// Node is a node in a UAST.
message Node {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	string internal_type = 1;
	map<string, string> properties = 2;
	repeated gopkg.in.bblfsh.sdk.v1.protocol.Node children = 3;
	string token = 4;
	gopkg.in.bblfsh.sdk.v1.uast.Position start_position = 5;
	gopkg.in.bblfsh.sdk.v1.uast.Position end_position = 6;
	repeated gopkg.in.bblfsh.sdk.v1.uast.role.Role roles = 7;
}

// ParseRequest is a request to parse a file and get its UAST.
message ParseRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	string filename = 1;
	string language = 2;
	string content = 3;
	gopkg.in.bblfsh.sdk.v1.protocol.Encoding encoding = 4;
	google.protobuf.Duration timeout = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

// ParseResponse is the reply to ParseRequest.
message ParseResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.goproto_stringer) = false;
	option (gogoproto.typedecl) = false;
	gopkg.in.bblfsh.sdk.v1.protocol.Status status = 1;
	repeated string errors = 2;
	google.protobuf.Duration elapsed = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
	gopkg.in.bblfsh.sdk.v1.protocol.Node uast = 4 [(gogoproto.customname) = "UAST"];
	string language = 5;
	string filename = 6;
}

// VersionRequest is a request to get server version
message VersionRequest {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
}

// VersionResponse is the reply to VersionRequest
message VersionResponse {
	option (gogoproto.goproto_getters) = false;
	option (gogoproto.typedecl) = false;
	gopkg.in.bblfsh.sdk.v1.protocol.Status status = 1;
	repeated string errors = 2;
	google.protobuf.Duration elapsed = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
	string version = 4;
	google.protobuf.Timestamp build = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// Encoding is the encoding used for the content string. Currently only
// UTF-8 or Base64 encodings are supported. You should use UTF-8 if you can
// and Base64 as a fallback.
enum Encoding {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// UTF8 encoding
	UTF8 = 0 [(gogoproto.enumvalue_customname) = "UTF8"];
	// Base64 encoding
	BASE64 = 1 [(gogoproto.enumvalue_customname) = "Base64"];
}

// Status is the status of a response.
enum Status {
	option (gogoproto.enumdecl) = false;
	option (gogoproto.goproto_enum_prefix) = false;
	option (gogoproto.goproto_enum_stringer) = false;
	// Ok status code.
	OK = 0 [(gogoproto.enumvalue_customname) = "Ok"];
	// Error status code. It is replied when the driver has got the AST with errors.
	ERROR = 1 [(gogoproto.enumvalue_customname) = "Error"];
	// Fatal status code. It is replied when the driver hasn't could get the AST.
	FATAL = 2 [(gogoproto.enumvalue_customname) = "Fatal"];
}

service ProtocolService {
	// NativeParse uses DefaultService to process the given parsing request to get
	// the AST.
	rpc NativeParse (gopkg.in.bblfsh.sdk.v1.protocol.NativeParseRequest) returns (gopkg.in.bblfsh.sdk.v1.protocol.NativeParseResponse);
	// Parse uses DefaultService to process the given parsing request to get the UAST.
	rpc Parse (gopkg.in.bblfsh.sdk.v1.protocol.ParseRequest) returns (gopkg.in.bblfsh.sdk.v1.protocol.ParseResponse);
	// Version uses DefaultVersioner to process the given version request to get the version.
	rpc Version (gopkg.in.bblfsh.sdk.v1.protocol.VersionRequest) returns (gopkg.in.bblfsh.sdk.v1.protocol.VersionResponse);
}

