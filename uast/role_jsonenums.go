// generated by jsonenums -type=Role; DO NOT EDIT

package uast

import (
	"encoding/json"
	"fmt"
)

var (
	_RoleNameToValue = map[string]Role{
		"Invalid":            Invalid,
		"Identifier":         Identifier,
		"Qualified":          Qualified,
		"Operator":           Operator,
		"Binary":             Binary,
		"Unary":              Unary,
		"Left":               Left,
		"Right":              Right,
		"Infix":              Infix,
		"Postfix":            Postfix,
		"Bitwise":            Bitwise,
		"Boolean":            Boolean,
		"Unsigned":           Unsigned,
		"LeftShift":          LeftShift,
		"RightShift":         RightShift,
		"Or":                 Or,
		"Xor":                Xor,
		"And":                And,
		"Expression":         Expression,
		"Statement":          Statement,
		"Equal":              Equal,
		"Not":                Not,
		"LessThan":           LessThan,
		"LessThanOrEqual":    LessThanOrEqual,
		"GreaterThan":        GreaterThan,
		"GreaterThanOrEqual": GreaterThanOrEqual,
		"Identical":          Identical,
		"Contains":           Contains,
		"Increment":          Increment,
		"Decrement":          Decrement,
		"Negative":           Negative,
		"Positive":           Positive,
		"Dereference":        Dereference,
		"TakeAddress":        TakeAddress,
		"File":               File,
		"Add":                Add,
		"Substract":          Substract,
		"Multiply":           Multiply,
		"Divide":             Divide,
		"Modulo":             Modulo,
		"Package":            Package,
		"Declaration":        Declaration,
		"Import":             Import,
		"Pathname":           Pathname,
		"Alias":              Alias,
		"Function":           Function,
		"Body":               Body,
		"Name":               Name,
		"Receiver":           Receiver,
		"Argument":           Argument,
		"Value":              Value,
		"ArgsList":           ArgsList,
		"Base":               Base,
		"Implements":         Implements,
		"Instance":           Instance,
		"Subtype":            Subtype,
		"Subpackage":         Subpackage,
		"Module":             Module,
		"Friend":             Friend,
		"World":              World,
		"If":                 If,
		"Condition":          Condition,
		"Then":               Then,
		"Else":               Else,
		"Switch":             Switch,
		"Case":               Case,
		"Default":            Default,
		"For":                For,
		"Initialization":     Initialization,
		"Update":             Update,
		"Iterator":           Iterator,
		"While":              While,
		"DoWhile":            DoWhile,
		"Break":              Break,
		"Continue":           Continue,
		"Goto":               Goto,
		"Block":              Block,
		"Scope":              Scope,
		"Return":             Return,
		"Try":                Try,
		"Catch":              Catch,
		"Finally":            Finally,
		"Throw":              Throw,
		"Assert":             Assert,
		"Call":               Call,
		"Callee":             Callee,
		"Positional":         Positional,
		"Noop":               Noop,
		"Literal":            Literal,
		"Byte":               Byte,
		"ByteString":         ByteString,
		"Character":          Character,
		"List":               List,
		"Map":                Map,
		"Null":               Null,
		"Number":             Number,
		"Regexp":             Regexp,
		"Set":                Set,
		"String":             String,
		"Tuple":              Tuple,
		"Type":               Type,
		"Entry":              Entry,
		"Key":                Key,
		"Primitive":          Primitive,
		"Assignment":         Assignment,
		"This":               This,
		"Comment":            Comment,
		"Documentation":      Documentation,
		"Whitespace":         Whitespace,
		"Incomplete":         Incomplete,
		"Unannotated":        Unannotated,
		"Visibility":         Visibility,
		"Annotation":         Annotation,
		"Anonymous":          Anonymous,
		"Enumeration":        Enumeration,
		"Arithmetic":         Arithmetic,
		"Relational":         Relational,
		"Variable":           Variable,
	}

	_RoleValueToName = map[Role]string{
		Invalid:            "Invalid",
		Identifier:         "Identifier",
		Qualified:          "Qualified",
		Operator:           "Operator",
		Binary:             "Binary",
		Unary:              "Unary",
		Left:               "Left",
		Right:              "Right",
		Infix:              "Infix",
		Postfix:            "Postfix",
		Bitwise:            "Bitwise",
		Boolean:            "Boolean",
		Unsigned:           "Unsigned",
		LeftShift:          "LeftShift",
		RightShift:         "RightShift",
		Or:                 "Or",
		Xor:                "Xor",
		And:                "And",
		Expression:         "Expression",
		Statement:          "Statement",
		Equal:              "Equal",
		Not:                "Not",
		LessThan:           "LessThan",
		LessThanOrEqual:    "LessThanOrEqual",
		GreaterThan:        "GreaterThan",
		GreaterThanOrEqual: "GreaterThanOrEqual",
		Identical:          "Identical",
		Contains:           "Contains",
		Increment:          "Increment",
		Decrement:          "Decrement",
		Negative:           "Negative",
		Positive:           "Positive",
		Dereference:        "Dereference",
		TakeAddress:        "TakeAddress",
		File:               "File",
		Add:                "Add",
		Substract:          "Substract",
		Multiply:           "Multiply",
		Divide:             "Divide",
		Modulo:             "Modulo",
		Package:            "Package",
		Declaration:        "Declaration",
		Import:             "Import",
		Pathname:           "Pathname",
		Alias:              "Alias",
		Function:           "Function",
		Body:               "Body",
		Name:               "Name",
		Receiver:           "Receiver",
		Argument:           "Argument",
		Value:              "Value",
		ArgsList:           "ArgsList",
		Base:               "Base",
		Implements:         "Implements",
		Instance:           "Instance",
		Subtype:            "Subtype",
		Subpackage:         "Subpackage",
		Module:             "Module",
		Friend:             "Friend",
		World:              "World",
		If:                 "If",
		Condition:          "Condition",
		Then:               "Then",
		Else:               "Else",
		Switch:             "Switch",
		Case:               "Case",
		Default:            "Default",
		For:                "For",
		Initialization:     "Initialization",
		Update:             "Update",
		Iterator:           "Iterator",
		While:              "While",
		DoWhile:            "DoWhile",
		Break:              "Break",
		Continue:           "Continue",
		Goto:               "Goto",
		Block:              "Block",
		Scope:              "Scope",
		Return:             "Return",
		Try:                "Try",
		Catch:              "Catch",
		Finally:            "Finally",
		Throw:              "Throw",
		Assert:             "Assert",
		Call:               "Call",
		Callee:             "Callee",
		Positional:         "Positional",
		Noop:               "Noop",
		Literal:            "Literal",
		Byte:               "Byte",
		ByteString:         "ByteString",
		Character:          "Character",
		List:               "List",
		Map:                "Map",
		Null:               "Null",
		Number:             "Number",
		Regexp:             "Regexp",
		Set:                "Set",
		String:             "String",
		Tuple:              "Tuple",
		Type:               "Type",
		Entry:              "Entry",
		Key:                "Key",
		Primitive:          "Primitive",
		Assignment:         "Assignment",
		This:               "This",
		Comment:            "Comment",
		Documentation:      "Documentation",
		Whitespace:         "Whitespace",
		Incomplete:         "Incomplete",
		Unannotated:        "Unannotated",
		Visibility:         "Visibility",
		Annotation:         "Annotation",
		Anonymous:          "Anonymous",
		Enumeration:        "Enumeration",
		Arithmetic:         "Arithmetic",
		Relational:         "Relational",
		Variable:           "Variable",
	}
)

func init() {
	var v Role
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RoleNameToValue = map[string]Role{
			interface{}(Invalid).(fmt.Stringer).String():            Invalid,
			interface{}(Identifier).(fmt.Stringer).String():         Identifier,
			interface{}(Qualified).(fmt.Stringer).String():          Qualified,
			interface{}(Operator).(fmt.Stringer).String():           Operator,
			interface{}(Binary).(fmt.Stringer).String():             Binary,
			interface{}(Unary).(fmt.Stringer).String():              Unary,
			interface{}(Left).(fmt.Stringer).String():               Left,
			interface{}(Right).(fmt.Stringer).String():              Right,
			interface{}(Infix).(fmt.Stringer).String():              Infix,
			interface{}(Postfix).(fmt.Stringer).String():            Postfix,
			interface{}(Bitwise).(fmt.Stringer).String():            Bitwise,
			interface{}(Boolean).(fmt.Stringer).String():            Boolean,
			interface{}(Unsigned).(fmt.Stringer).String():           Unsigned,
			interface{}(LeftShift).(fmt.Stringer).String():          LeftShift,
			interface{}(RightShift).(fmt.Stringer).String():         RightShift,
			interface{}(Or).(fmt.Stringer).String():                 Or,
			interface{}(Xor).(fmt.Stringer).String():                Xor,
			interface{}(And).(fmt.Stringer).String():                And,
			interface{}(Expression).(fmt.Stringer).String():         Expression,
			interface{}(Statement).(fmt.Stringer).String():          Statement,
			interface{}(Equal).(fmt.Stringer).String():              Equal,
			interface{}(Not).(fmt.Stringer).String():                Not,
			interface{}(LessThan).(fmt.Stringer).String():           LessThan,
			interface{}(LessThanOrEqual).(fmt.Stringer).String():    LessThanOrEqual,
			interface{}(GreaterThan).(fmt.Stringer).String():        GreaterThan,
			interface{}(GreaterThanOrEqual).(fmt.Stringer).String(): GreaterThanOrEqual,
			interface{}(Identical).(fmt.Stringer).String():          Identical,
			interface{}(Contains).(fmt.Stringer).String():           Contains,
			interface{}(Increment).(fmt.Stringer).String():          Increment,
			interface{}(Decrement).(fmt.Stringer).String():          Decrement,
			interface{}(Negative).(fmt.Stringer).String():           Negative,
			interface{}(Positive).(fmt.Stringer).String():           Positive,
			interface{}(Dereference).(fmt.Stringer).String():        Dereference,
			interface{}(TakeAddress).(fmt.Stringer).String():        TakeAddress,
			interface{}(File).(fmt.Stringer).String():               File,
			interface{}(Add).(fmt.Stringer).String():                Add,
			interface{}(Substract).(fmt.Stringer).String():          Substract,
			interface{}(Multiply).(fmt.Stringer).String():           Multiply,
			interface{}(Divide).(fmt.Stringer).String():             Divide,
			interface{}(Modulo).(fmt.Stringer).String():             Modulo,
			interface{}(Package).(fmt.Stringer).String():            Package,
			interface{}(Declaration).(fmt.Stringer).String():        Declaration,
			interface{}(Import).(fmt.Stringer).String():             Import,
			interface{}(Pathname).(fmt.Stringer).String():           Pathname,
			interface{}(Alias).(fmt.Stringer).String():              Alias,
			interface{}(Function).(fmt.Stringer).String():           Function,
			interface{}(Body).(fmt.Stringer).String():               Body,
			interface{}(Name).(fmt.Stringer).String():               Name,
			interface{}(Receiver).(fmt.Stringer).String():           Receiver,
			interface{}(Argument).(fmt.Stringer).String():           Argument,
			interface{}(Value).(fmt.Stringer).String():              Value,
			interface{}(ArgsList).(fmt.Stringer).String():           ArgsList,
			interface{}(Base).(fmt.Stringer).String():               Base,
			interface{}(Implements).(fmt.Stringer).String():         Implements,
			interface{}(Instance).(fmt.Stringer).String():           Instance,
			interface{}(Subtype).(fmt.Stringer).String():            Subtype,
			interface{}(Subpackage).(fmt.Stringer).String():         Subpackage,
			interface{}(Module).(fmt.Stringer).String():             Module,
			interface{}(Friend).(fmt.Stringer).String():             Friend,
			interface{}(World).(fmt.Stringer).String():              World,
			interface{}(If).(fmt.Stringer).String():                 If,
			interface{}(Condition).(fmt.Stringer).String():          Condition,
			interface{}(Then).(fmt.Stringer).String():               Then,
			interface{}(Else).(fmt.Stringer).String():               Else,
			interface{}(Switch).(fmt.Stringer).String():             Switch,
			interface{}(Case).(fmt.Stringer).String():               Case,
			interface{}(Default).(fmt.Stringer).String():            Default,
			interface{}(For).(fmt.Stringer).String():                For,
			interface{}(Initialization).(fmt.Stringer).String():     Initialization,
			interface{}(Update).(fmt.Stringer).String():             Update,
			interface{}(Iterator).(fmt.Stringer).String():           Iterator,
			interface{}(While).(fmt.Stringer).String():              While,
			interface{}(DoWhile).(fmt.Stringer).String():            DoWhile,
			interface{}(Break).(fmt.Stringer).String():              Break,
			interface{}(Continue).(fmt.Stringer).String():           Continue,
			interface{}(Goto).(fmt.Stringer).String():               Goto,
			interface{}(Block).(fmt.Stringer).String():              Block,
			interface{}(Scope).(fmt.Stringer).String():              Scope,
			interface{}(Return).(fmt.Stringer).String():             Return,
			interface{}(Try).(fmt.Stringer).String():                Try,
			interface{}(Catch).(fmt.Stringer).String():              Catch,
			interface{}(Finally).(fmt.Stringer).String():            Finally,
			interface{}(Throw).(fmt.Stringer).String():              Throw,
			interface{}(Assert).(fmt.Stringer).String():             Assert,
			interface{}(Call).(fmt.Stringer).String():               Call,
			interface{}(Callee).(fmt.Stringer).String():             Callee,
			interface{}(Positional).(fmt.Stringer).String():         Positional,
			interface{}(Noop).(fmt.Stringer).String():               Noop,
			interface{}(Literal).(fmt.Stringer).String():            Literal,
			interface{}(Byte).(fmt.Stringer).String():               Byte,
			interface{}(ByteString).(fmt.Stringer).String():         ByteString,
			interface{}(Character).(fmt.Stringer).String():          Character,
			interface{}(List).(fmt.Stringer).String():               List,
			interface{}(Map).(fmt.Stringer).String():                Map,
			interface{}(Null).(fmt.Stringer).String():               Null,
			interface{}(Number).(fmt.Stringer).String():             Number,
			interface{}(Regexp).(fmt.Stringer).String():             Regexp,
			interface{}(Set).(fmt.Stringer).String():                Set,
			interface{}(String).(fmt.Stringer).String():             String,
			interface{}(Tuple).(fmt.Stringer).String():              Tuple,
			interface{}(Type).(fmt.Stringer).String():               Type,
			interface{}(Entry).(fmt.Stringer).String():              Entry,
			interface{}(Key).(fmt.Stringer).String():                Key,
			interface{}(Primitive).(fmt.Stringer).String():          Primitive,
			interface{}(Assignment).(fmt.Stringer).String():         Assignment,
			interface{}(This).(fmt.Stringer).String():               This,
			interface{}(Comment).(fmt.Stringer).String():            Comment,
			interface{}(Documentation).(fmt.Stringer).String():      Documentation,
			interface{}(Whitespace).(fmt.Stringer).String():         Whitespace,
			interface{}(Incomplete).(fmt.Stringer).String():         Incomplete,
			interface{}(Unannotated).(fmt.Stringer).String():        Unannotated,
			interface{}(Visibility).(fmt.Stringer).String():         Visibility,
			interface{}(Annotation).(fmt.Stringer).String():         Annotation,
			interface{}(Anonymous).(fmt.Stringer).String():          Anonymous,
			interface{}(Enumeration).(fmt.Stringer).String():        Enumeration,
			interface{}(Arithmetic).(fmt.Stringer).String():         Arithmetic,
			interface{}(Relational).(fmt.Stringer).String():         Relational,
			interface{}(Variable).(fmt.Stringer).String():           Variable,
		}
	}
}

// MarshalJSON is generated so Role satisfies json.Marshaler.
func (r Role) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RoleValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Role: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Role satisfies json.Unmarshaler.
func (r *Role) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Role should be a string, got %s", data)
	}
	v, ok := _RoleNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Role %q", s)
	}
	*r = v
	return nil
}
